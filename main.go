package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strconv"

	"github.com/aggronmagi/protoc-gen-gopb/gengo"
	"github.com/aggronmagi/protoc-gen-gopb/genparse"
	"go.uber.org/multierr"
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	genGoDocURL = "https://github.com/aggronmagi/protoc-gen-gopb"
)

func setupConfigOption(flags *flag.FlagSet) {
	// 如果环境变量设置了值, 读取作为为默认值. 优先使用传递的参数
	env := os.Getenv("GOPB_WIRE_PACKAGE")
	if env != "" {
		genparse.WirePkg = env
	}
	env = os.Getenv("GOPB_GEN_GET")
	if env != "" {
		genparse.Getter, _ = strconv.ParseBool(env)
	}
	env = os.Getenv("GOPB_GEN_ZAP")
	if env != "" {
		genparse.Zap, _ = strconv.ParseBool(env)
	}
	// env = os.Getenv("GOPB_GEN_DEBUG")
	// if env != "" {
	// 	cfg.debug, _ = strconv.ParseBool(env)
	// }

	flags.BoolVar(&genparse.Zap, "zap", genparse.Zap, "generate zap log interface")
	flags.BoolVar(&genparse.Getter, "get", genparse.Getter, "generate message getter method")
	flags.StringVar(&genparse.WirePkg, "pbwire", genparse.WirePkg, "use protobuf wire package")
}

func main() {
	if len(os.Args) == 2 && os.Args[1] == "--version" {
		fmt.Fprintf(os.Stdout, "%v %v\n", filepath.Base(os.Args[0]), genparse.Version)
		os.Exit(0)
	}
	if len(os.Args) == 2 && os.Args[1] == "--help" {
		fmt.Fprintf(os.Stdout, "See "+genGoDocURL+" for usage information.\n")
		os.Exit(0)
	}
	var flags flag.FlagSet
	plugins := flags.String("plugins", "", "deprecated option")
	setupConfigOption(&flags)

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) (err error) {
		if *plugins != "" {
			return errors.New("protoc-gen-gopb: plugins are not supported; ")
		}
		// 生成消息
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			err = multierr.Append(err, genProtobuf(gen, f))
		}
		//gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		return
	})
}

func genProtobuf(gen *protogen.Plugin, f *protogen.File) (err error) {
	filename := f.GeneratedFilenamePrefix + ".gopb.go"
	//log.Println(filename)
	g := gen.NewGeneratedFile(filename, f.GoImportPath)
	// genStandaloneComments(g, f, int32(FileDescriptorProto_Syntax_field_number))
	// genGeneratedHeader(gen, g, f)
	// genStandaloneComments(g, f, int32(FileDescriptorProto_Package_field_number))

	// g.P("package ", f.GoPackageName)
	// g.P()

	// for _, e := range f.Enums {
	// 	err = multierr.Append(err, genEnum(g, f, e))
	// }
	// for _, m := range f.Messages {
	// 	err = multierr.Append(err, genMessage(g, f, m))
	// }

	// parse
	data := &gengo.GenerateStruct{}
	data.Package = string(f.GoPackageName)
	// 打印版本信息
	data.VersionInfo = func() string {
		buf := bytes.Buffer{}

		buf.WriteString("// Code generated by protoc-gen-gopb. DO NOT EDIT.\n")

		buf.WriteString("// versions:\n")
		protocGenGoVersion := genparse.Version
		protocVersion := "(unknown)"
		if v := gen.Request.GetCompilerVersion(); v != nil {
			protocVersion = fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
			if s := v.GetSuffix(); s != "" {
				protocVersion += "-" + s
			}
		}
		buf.WriteString("// \tprotoc-gen-gopb ")
		buf.WriteString(protocGenGoVersion)
		buf.WriteByte('\n')
		buf.WriteString("// \tprotoc          ")
		buf.WriteString(protocVersion)
		buf.WriteByte('\n')

		if f.Proto.GetOptions().GetDeprecated() {
			buf.WriteString(fmt.Sprintln("// ", f.Desc.Path(), " is a deprecated file."))
		} else {
			buf.WriteString(fmt.Sprintln("// source: ", f.Desc.Path()))
		}
		buf.WriteByte('\n')

		return buf.String()
	}
	// import 函数
	data.SetImport(func(pkg, name string) string {
		g.Import(protogen.GoImportPath(pkg))
		g.QualifiedGoIdent(protogen.GoIdent{GoName: name, GoImportPath: protogen.GoImportPath(pkg)})
		return pkg
	})
	for _, e := range f.Enums {
		err = multierr.Append(err, genparse.ParseEnum(data, g, f, e))
	}
	for _, m := range f.Messages {
		err = multierr.Append(err, genparse.ParseMessage(data, g, f, m))
	}
	if err != nil {
		return
	}
	// generate
	buf, err := gengo.GenExec(data)
	if err != nil {
		return
	}
	// output
	g.P(string(buf))
	return
}
